buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'

if(project.tasks.findByName("wrapper") == null) {
    task wrapper(type: Wrapper) {
        gradleVersion = '7.6'
        distributionType = Wrapper.DistributionType.ALL
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: property("mappingsChannel"), version: property("mappingsVersion")
//    accessTransformer = file('workspace/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${project.name.toLowerCase()}"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                if(findProject(':ExNihiloAE') != null) {
                    ExNihiloAE {
                        source project(':ExNihiloAE').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloMekanism') != null) {
                    ExNihiloMekanism {
                        source project(':ExNihiloMekanism').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloSequentia') != null) {
                    ExNihiloSequentia {
                        source project(':ExNihiloSequentia').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloThermal') != null) {
                    ExNihiloThermal {
                        source project(':ExNihiloThermal').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloTinkers') != null) {
                    ExNihiloThermal {
                        source project(':ExNihiloTinkers').sourceSets.main
                    }
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${project.name.toLowerCase()}"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                if(findProject(':ExNihiloAE') != null) {
                    ExNihiloAE {
                        source project(':ExNihiloAE').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloMekanism') != null) {
                    ExNihiloMekanism {
                        source project(':ExNihiloMekanism').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloSequentia') != null) {
                    ExNihiloSequentia {
                        source project(':ExNihiloSequentia').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloThermal') != null) {
                    ExNihiloThermal {
                        source project(':ExNihiloThermal').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloTinkers') != null) {
                    ExNihiloThermal {
                        source project(':ExNihiloTinkers').sourceSets.main
                    }
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                if(findProject(':ExNihiloAE') != null) {
                    ExNihiloAE {
                        source project(':ExNihiloAE').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloMekanism') != null) {
                    ExNihiloMekanism {
                        source project(':ExNihiloMekanism').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloSequentia') != null) {
                    ExNihiloSequentia {
                        source project(':ExNihiloSequentia').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloThermal') != null) {
                    ExNihiloThermal {
                        source project(':ExNihiloThermal').sourceSets.main
                    }
                }
                if(findProject(':ExNihiloTinkers') != null) {
                    ExNihiloThermal {
                        source project(':ExNihiloTinkers').sourceSets.main
                    }
                }
            }
        }
    }
}

jar {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    minecraft "net.minecraftforge:forge:${property("minecraftVersion")}-${property("forgeVersion")}"

    if(findProject(':ExNihiloAE') != null) {
        implementation project(':ExNihiloAE')
    }
    if(findProject(':ExNihiloMekanism') != null) {
        implementation project(':ExNihiloMekanism')
    }
    if(findProject(':ExNihiloSequentia') != null) {
        implementation project(':ExNihiloSequentia')
    }
    if(findProject(':ExNihiloThermal') != null) {
        implementation project(':ExNihiloThermal')
    }
    if(findProject(':ExNihiloTinkers') != null) {
        implementation project(':ExNihiloTinkers')
    }
}

if(rootProject.name != project.name) {
    task updateToolingProperties(type: WriteProperties) {
        group = "management"
        description = "Updates tooling properties for all sub-projects"

        outputs.upToDateWhen {
            false
        }

        outputFile("gradle.properties")

        doFirst {
            def currentProps = getProps(file("gradle.properties"))
            def rootProps = getProps(file("$rootDir/gradle.properties"))

            rootProps.forEach((key, value) -> {
                if (currentProps.containsKey(key)) {
                    currentProps.put(key, value)
                }
            })
            properties(currentProps)
        }

        comment('''This file may have been edited by a Gradle Task.''')
    }
}

Map<String, Object> getProps(File propFile) {
    Map<String, Object> mappedProps = new HashMap<>()
    Properties props = new Properties()
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
        props.forEach((key, value) -> {
            mappedProps.put(key as String, value)
        })
    }
    return mappedProps
}